version: 0.2

env:
  shell: bash
  variables:
    AWS_DEFAULT_REGION: eu-central-1
  parameter-store:
    AWS_SWISSTOPO_BGDI_ACCOUNT_ID: swisstopo-bgdi_account-id
    AWS_SWISSTOPO_BGDI_DEV_ACCOUNT_ID: swisstopo-bgdi-dev_account-id

phases:

  install:
    runtime-versions:
      nodejs: 14
    commands:
      # updating node to v16 (so npm is >=v8.x.x)
      - n 16
      # npm ci reads only the package-lock.json file (not the package.json) to be sure to have exactly the same libraries
      # that were used last time npm install was done on the developer's device.
      - CYPRESS_CACHE_FOLDER=/tmp/.cache npm ci

  pre_build:
    commands:
      - #=========== Configuring stuff ===================================
      - export PULL_REQUEST=${CODEBUILD_WEBHOOK_TRIGGER#pr/*}
      - export GIT_BRANCH="${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/}"
      - export GIT_BASE_BRANCH="${CODEBUILD_WEBHOOK_BASE_REF#refs/heads/}"
      - export GIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export GIT_TAG="$(git describe --tags --dirty || echo 'unknown')"
      - export GIT_DIRTY="$(git status --porcelain)"
      # When build are manually triggered by a user, the CODEBUILD_WEBHOOK_HEAD_REF is not
      # set resulting to an empty GIT_BRANCH. Usually Codebuild don't checkout the branch but
      # the commit and is on a detached HEAD. Therefore we need to use `git describe --exact-match --all`
      # that returns either the git tag of the detached HEAD if any or the branch if any or failed.
      - |
        if [[ -z "${GIT_BRANCH}" ]];
        then
          echo "git rev-parse HEAD"
          git rev-parse HEAD
          echo "git show-ref"
          git show-ref
          GIT_BRANCH=$(git show-ref | grep "$(git rev-parse HEAD)" | awk '!/refs\/tags\// {print $2}' | head -1)
          export GIT_BRANCH=${GIT_BRANCH##*/}
        fi
      # if this build has been triggered by a push on master (PR merge on master), we deploy on INT (otherwise everything goes to dev)
      - export DEPLOY_TARGET="dev"
      - export BUILD_TYPE_1=dev
      - export BUILD_OUTPUT_1=development
      - export BUILD_TYPE_2=dev
      - export BUILD_OUTPUT_2=development
      - if [[ "${GIT_BRANCH}" == "master" ]]; then
          export DEPLOY_TARGET="int";
          export BUILD_TYPE_1=int;
          export BUILD_OUTPUT_1=integration;
          export BUILD_TYPE_2=prod;
          export BUILD_OUTPUT_2=production;
        elif [[ "${GIT_BRANCH}" == "develop" ]]; then
          export BUILD_TYPE_2=int;
          export BUILD_OUTPUT_2=integration;
        fi
      # if we are on DEV, we have to switch to the account "swisstopo-bgdi-dev", otherwise the account is "swisstopo-bgdi"
      - export AWS_ACCOUNT_TO_USE="${AWS_SWISSTOPO_BGDI_DEV_ACCOUNT_ID}:role/BgdiDevCodebuildAccess"
      - if [ "${DEPLOY_TARGET}" = "int" ] ; then
          export AWS_ACCOUNT_TO_USE="${AWS_SWISSTOPO_BGDI_ACCOUNT_ID}:role/BgdiCodebuildAccess";
        fi
      # Set the app version to the git tag
      - export APP_VERSION=${GIT_TAG}
      - #=== Environment Variables =======================================
      - #CODEBUILD_INITIATOR=${CODEBUILD_INITIATOR}
      - echo CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_WEBHOOK_EVENT=${CODEBUILD_WEBHOOK_EVENT}
      - echo CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID=${CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID}
      - echo CODEBUILD_WEBHOOK_BASE_REF=${CODEBUILD_WEBHOOK_BASE_REF}
      - echo CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF=}
      - echo CODEBUILD_WEBHOOK_TRIGGER=${CODEBUILD_WEBHOOK_TRIGGER}
      - echo CODEBUILD_WEBHOOK_MERGE_COMMIT=${CODEBUILD_WEBHOOK_MERGE_COMMIT}
      - echo CODEBUILD_WEBHOOK_PREV_COMMIT=${CODEBUILD_WEBHOOK_PREV_COMMIT}
      - echo CODEBUILD_BUILD_ID=${CODEBUILD_BUILD_ID}
      - echo CODEBUILD_SOURCE_REPO_URL=${CODEBUILD_SOURCE_REPO_URL}
      - echo PULL_REQUEST=${PULL_REQUEST}
      - echo GIT_BRANCH=${GIT_BRANCH}
      - echo GIT_HASH=${GIT_HASH}
      - echo GIT_TAG=${GIT_TAG}
      - echo GIT_DIRTY=${GIT_DIRTY}
      - echo BUILD_TYPE_1=${BUILD_TYPE_1}
      - echo BUILD_TYPE_2=${BUILD_TYPE_2}
      - echo BUILD_OUTPUT_2=${BUILD_OUTPUT_2}
      - echo BUILD_OUTPUT_1=${BUILD_OUTPUT_1}
      - echo DEPLOY_TARGET=${DEPLOY_TARGET}
      - echo AWS_ACCOUNT_TO_USE=${AWS_ACCOUNT_TO_USE}
      - echo APP_VERSION=${GIT_TAG}
      # As the cypress/download folder is not added to git, and (somehow) not created by Cypress at startup, we create it
      - mkdir -p cypress/downloads/

  build:
    commands:
      - echo ===================================================================
      - echo Building application for ${BUILD_TYPE_1}
      - npm run build:${BUILD_TYPE_1}
      - if [[ "${BUILD_TYPE_1}" != "${BUILD_TYPE_2}" ]]; then
          echo -------------------------------------------------------------------;
          echo Building application for ${BUILD_TYPE_2};
          npm run build:${BUILD_TYPE_2};
        fi


  post_build:
    commands:
      - echo ===================================================================
      - echo Unit testing...
      # will build the application in dev mode before testing
      - CYPRESS_CACHE_FOLDER=/tmp/.cache npm run test:unit

      - echo ===================================================================
      - echo Deploying to ${DEPLOY_TARGET}...
      # switching role for deploy (otherwise the S3 bucket won't be visible as it's another account)
      # the application will be built by the npm target before deploying
      - npm run deploy:${DEPLOY_TARGET} -- --role=arn:aws:iam::${AWS_ACCOUNT_TO_USE} --branch=${GIT_BRANCH}

      - echo ===================================================================
      - echo E2E Testings...
      # will build the application in dev mode before testing
      - CYPRESS_CACHE_FOLDER=/tmp/.cache npm run test:e2e:ci:${BUILD_TYPE_1}
      - echo DONE


artifacts:
  # The name below is only used for manual build (not by build started by the webhook)
  name: ${BUILD_TYPE_1}/web-mapviewer/${APP_VERSION}
  files:
    - '**/*'
  base-directory: dist/${BUILD_OUTPUT_1}
  secondary-artifacts:
    production:
      name: ${BUILD_TYPE_2}/web-mapviewer/${APP_VERSION}
      files:
        - '**/*'
      base-directory: dist/${BUILD_OUTPUT_2}